version: "3.8"

services:
    proxy:
        container_name: portfolio_proxy
        build:
            context: ./nginx
            dockerfile: Dockerfile
        ports:
            - "80:80"
            - "443:443"
        networks:
            - web-network
        depends_on:
            - proxy_certbot
            - projects
            - namah
            - gifter
            - dashboard
            - cors-anywhere
            - karikariyaki
        restart: unless-stopped
        volumes:
            - ./nginx/certbot/conf:/etc/letsencrypt
            - ./nginx/certbot/www:/var/www/certbot
        command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"

    proxy_certbot:
        container_name: portfolio_proxy_certbot
        image: certbot/certbot
        networks:
            - web-network
        restart: unless-stopped
        volumes:
            - ./nginx/certbot/conf:/etc/letsencrypt
            - ./nginx/certbot/www:/var/www/certbot
        entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"

    projects:
        container_name: portfolio_web_api_projects
        build:
            context: ./services/web/projects
            dockerfile: Dockerfile
        networks:
            - web-network
        depends_on:
            - mongodb
        restart: unless-stopped

    namah:
        container_name: portfolio_web_api_namah
        build:
            context: ./services/web/namah
            dockerfile: Dockerfile
        networks:
            - web-network
        volumes:
            - /node_modules/namah:/app/node_modules
        depends_on:
            - mongodb
        restart: unless-stopped

    gifter:
        container_name: portfolio_web_api_gifter
        build:
            context: ./services/web/gifter
            dockerfile: Dockerfile
        networks:
            - web-network
        volumes:
            - ./node_modules/gifter:/app/node_modules
        depends_on:
            - mongodb
        restart: unless-stopped

    dashboard:
        container_name: portfolio_web_api_dashboard
        build:
            context: ./services/web/dashboard
            dockerfile: Dockerfile
        networks:
            - web-network
        volumes:
            - ./node_modules/dashboard:/app/node_modules
        depends_on:
            - mongodb
        restart: unless-stopped

    cors-anywhere:
        container_name: portfolio_web_api_cors-anywhere
        build:
           context: ./services/web/cors-anywhere
           dockerfile: Dockerfile
        networks:
            - web-network
        volumes:
            - ./node_modules/cors-anywhere:/app/node_modules
        depends_on:
            - mongodb
        restart: unless-stopped

    karikariyaki:
        container_name: portfolio_web_api_karikariyaki
        build:
           context: ./services/web/karikariyaki
           dockerfile: Dockerfile
        networks:
            - web-network
        volumes:
            - ./node_modules/karikariyaki:/app/node_modules
        depends_on:
            - mongodb
        restart: unless-stopped

    mongodb:
        container_name: portfolio_database_mongo
        image: mongo:6-jammy
        networks:
            - web-network
            - database-network
        volumes:
            - db-data:/data/db
        restart: unless-stopped

    mongodb_backup:
        container_name: portfolio_database_mongo_backup
        image: tiredofit/db-backup:3.9.1
        networks:
            - database-network
        volumes:
            - db-backup:/data/backup
        depends_on:
            - mongodb
        environment:
            - DEBUG_MODE=FALSE
            - DB_TYPE=mongo
            - DB_HOST=mongodb
            - DB_NAME=portfolio_okonomiyator
            - DB_USER=
            - DB_PASS=
            - DB_DUMP_FREQ=60
            - DB_DUMP_BEGIN=+60
            - DB_CLEANUP_TIME=43800
            - CHECKSUM=SHA1
            - COMPRESSION=GZ
            - SPLIT_DB=FALSE
            - CONTAINER_ENABLE_MONITORING=FALSE
        restart: always

volumes:
    db-data:
    db-backup:

networks:
    web-network:
        driver: bridge
    database-network:
        driver: bridge
